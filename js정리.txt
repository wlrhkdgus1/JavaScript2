자바스크립트(JavaScript) 요약 정리
JavaScript의 특징
웹 브라우저에서 동작하는 프로그래밍언어이다.
인터프리터 언어이다. (한줄씩 해석하여 명령어를 실행)

컴파일 언어에 비해서 실행속도 느림 -> JavaScript 엔진으로 단점 보완
<script> 태그를 사용한다.
“src 속성”을 사용할 경우 외부 스크립트 참조 전용이다. 즉, 안에 함수를 작성하더라도 사용 불가하다.
<script>태그는 HTML 파일 내부의 head, body 어느 곳에서나 선언 가능하다.

head 안에 위치
만약에 js파일이 크다면, 사용자가 브라우저 화면을 보기까지 많은 시간이 소요될 수 있다.
body 안에 위치
페이지가 준비 된 후 js파일을 실행한다. 사용자가 브라우저를 빠르게 본다는 장점이 있지만, 웹 사이트가 자바스크립트에 의존적이라면, 서버에서 js를 받아오고 실행하는 시간을 기다려야함.
head + async
1.파싱 도중 js를 만나면 2.병렬도 js파일을 다운로드를 받고 3.다운로드된 js파일을 실행한다. 4.실행이 완료한 후 나머지 html을 파싱한다. ===> body안에 있을 때 보다 js를 다운받는 시간을 절약할 수 있지만, js를 실행할 때 html에 원하는 요소가 아직 정의되어 있지 않을 수 있다.
head + defer
1.파싱 도중 js를 만나면 2.병렬도 js파일을 다운받는다. 3.html 파싱을 완료하고 사용자에게 보여준 뒤에 4.js를 실행한다.
왜 JavaScript를 사용하는가?
HTML 문서 조작

HTML문서에 대한 조작(태그,속성,스타일)을 통해서 데이터를 얻어온다.
유효성 검사

서버에게 데이터를 보내기 전에 검사
변수
타입을 명시하지 않고, var 키워드를 사용하여 선언한다.
var 키워드 입력하지 않으면, 반드시 전역변수가 된다.
할당되는 과정에서 자동으로 변수의 타입 결정 -> 같은 변수에 여러 타입의 값 할당 가능
키워드	구분	선언위치	재선언
var	변수	전역 스코프	가능
let (ES6)	변수	해당 스코프	불가능
const (ES6)	상수	해당 스코프	불가능
자료형
자료형	typeof 출력값	설명
숫자형	number	정수, 실수
문자열형	string	문자 ’, ” 으로 표기
boolean형	boolean	참, 거짓
undefined	undefined	변수가 선언 되었지만 초기화가 되지 않을 경우
null	object	값이 존재하지 않을 경우
숫자를 정수와 실수로 나누어 구분하지 않는다.
0으로 나누는 연산에 대해 예외를 발생 시키지 않는다.
특별한 상수가 존재한다.

Infinity : 무한대, 어떤 수를 0으로 나누거나 Infinity를 어떠한 수로 연산할 때 발생
NaN(Not a Number) : 계산 결과가 숫자가 아님을 나냄
console.log(100 / 0) // Infinity
console.log(new Number('1A')) // NaN
문자열 표현
’ , ” 둘 다 사용 가능.
백틱(`)을 사용하면, 줄바꿈 표현 가능.
백틱(`)은 ${ 변수명 } 으로 사용 가능
var a = "홍길동";
var b = '홍길동';
var c = `홍 길
동`;
var str = `홍 길 동`;

console.log(`이름은 ${str} 입니다`);
console.log(a);
console.log(b);
console.log(c);
이름은 홍 길 동 입니다
홍길동
홍길동
홍 길
동
문자열 비교
1.자바

"java".equals("JAVA")   ==> (O) 문자열 내용 비교
"java" == "JAVA"        ==> (O) 메모리 주소 비교
2.자바스크립트

"javascript".equals("JAVASCRIPT") ==> (X) 에러발생         
"javascript" == "JAVASCRIPT"      ==> (O) 문자열 내용 비교
”==”와 ”===” 차이점

== : 내용만 같다면 자동 true를 반환. 자료형이 다를 경우 형변환 후 비교
=== : 자료형, 내용 모두 같아야만 true를 반환.
var a = 100;
var b = '100';

if (a==b) {
    console.log(a + "==" + b);
}

if (a===b) {
    console.log(a + "===" + b);
} else {
    console.log(a + "!==" + b);
}
100==100
100!==100
개행 처리하기
var str = "줄바꿈 \n 테스트 중...";
var str2 = "줄바꿈 <br> 테스트 중...";
document.write(str);
document.write(str2);
줄바꿈 테스트 중...줄바꿈
테스트 중...
자바스크립트는 <br>태그를 사용하여 개행 처리를 한다.

관련 예제 (구구단 만들기)
열이 간격은 어떻게 조절할 것인가?
구구단
2*1=2	3*1=3	4*1=4	5*1=5	6*1=6	7*1=7	8*1=8	9*1=9	
2*2=4	3*2=6	4*2=8	5*2=10	6*2=12	7*2=14	8*2=16	9*2=18	
2*3=6	3*3=9	4*3=12	5*3=15	6*3=18	7*3=21	8*3=24	9*3=27	
2*4=8	3*4=12	4*4=16	5*4=20	6*4=24	7*4=28	8*4=32	9*4=36	
2*5=10	3*5=15	4*5=20	5*5=25	6*5=30	7*5=35	8*5=40	9*5=45	
2*6=12	3*6=18	4*6=24	5*6=30	6*6=36	7*6=42	8*6=48	9*6=54	
2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49	8*7=56	9*7=63	
2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64	9*8=72	
2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81	
<pre>태그를 사용해서 열의 간격을 조절 가능하도록 한다.
// <pre> 태그 사용해서 줄 간격 조절
document.write("<pre>");
for (let i=1; i<=9; i++) {
  for (let j=2; j<=9; j++) {
    document.write(`${j}*${i}=${i * j}\t`);
  }
  document.write("<br>");
}
document.write("</pre>");
<table> 을 사용
document.write("<table cellpadding = 5>");
for (let i=1; i<=9; i++) {
  document.write("<tr>");
  for (let j=2; j<=9; j++) {
    document.write("<td>");
    document.write(`${j}*${i}=${i * j}`);
    document.write("</td>");
  }
  document.write("</tr>");
}
document.write("</table>");
호이스팅
변수 끌어올림

소스코드가 실행되기 전, 변수 선언은 미리 이루어진다.

특히 var 키워드는 런타임 전에 변수를 선언하면서 ‘undefined’가 할당된다.

그래서 변수를 선언하기 전에! 해당 변수를 참조할수 있게 된다.

// 이 코드는 오류 없이 실행 된다

console.log(var_01);  // undefined
var var_01; 
var_01 이 뒤에서 선언되었는데도!

console.log(var_01)는 잘 실행되어 undefined를 출력한다.

코드실행 런타임 전에 var_01 변수의 선언과 undefined의 할당이 이루어졌기 때문이다.

Constants
한 번 할당하면 절대 값이 변하지 않는 것을 말한다.

favor immutable data type always for a few reasons
security
thread safety
reduce human mistake
const max = 5;
일급객체
함수를 변수에 저장할 수 있다.
함수의 인자로 함수를 입력할 수 있다.
함수의 리턴으로 함수를 리턴할 수 있다.
브라우저 렌더링 과정
서버연결 XmlHttpRequest
html 가져오기
파싱해서 document 만들기
자바스크립트 실행하기
렌더링하기
반드시 순서대로 실행됨.

AJAX
브라우저 통신 모듈을 이용하지 않고, 직접 통신하기 위해서 사용

xml 활용 용도
데이터 저장 용도
데이터 교활 용도
화면 설계 용도